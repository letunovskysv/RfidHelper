@page "/"
@using System.Linq
@using SmartMinex.Runtime
@using System.Data;
@inject TDispatcher _rtm
@inject IJSRuntime _jsr

<RadzenStack Orientation="Orientation.Horizontal">
    <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
        <RadzenButton Style="width:200px;" Click="@(e => OnPollClick())">Опросить</RadzenButton>
        <RadzenLabel>@CountMessage(_data?.Count() ?? 0)</RadzenLabel>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
        Период опроса:
        <RadzenDropDown Data=@_var_poll @bind-Value=@_poll ValueProperty="Key" TextProperty="Value" Style="width:250px;" Change=@OnPollChanged />
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
        Режим отображения:
        <RadzenDropDown Data=@_var_mode @bind-Value=@_mode ValueProperty="Key" TextProperty="Value" Style="width:250px;" Change=@OnModeChanged />
    </RadzenStack>
    <RadzenButton Style="height:36px;" Disabled=@(_state == PageState.None || _data == null) Click="@(e => ExportToPdf())">Экспорт в PDF</RadzenButton>
</RadzenStack>

@if (_state > PageState.None && _data != null)
{
    <RadzenDataGrid Data="@_data" TItem="RfidTag" AllowSorting="true" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" SelectionMode="DataGridSelectionMode.Single"
                    FilterMode="FilterMode.Simple" @bind-Value=@_selected CellRender=@OnRowRender
                    EmptyText="Нет доступных радиочастотных меток!">
        <Columns>
            <RadzenDataGridColumn TItem="RfidTag" Property="Code" Title="Номер" TextAlign="TextAlign.Right" />
            <RadzenDataGridColumn TItem="RfidTag" Property="Battery" Title="Зарядка" TextAlign="TextAlign.Right" FilterValue="@_batteryfilter">
                <Template Context="r">
                    <RadzenText>@(r.BatteryFault ? "Неисправна" : r.BatteryWait ? "???" : r.Battery + " В")</RadzenText>
                </Template>
                <FilterTemplate>
                    <RadzenDropDown Data="@_battery" @bind-Value=@_batteryfilter Style="width:100%" Change=@OnBatteryFilter ValueProperty="Key" TextProperty="Value" />
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="RfidTag" Property="State" Title="Состояние" TextAlign="TextAlign.Right" FilterValue="@_statefilter">
                <FilterTemplate>
                    <RadzenDropDown Data="@_states" @bind-Value=@_statefilter Style="width:100%" Change=@OnStateFilter />
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="RfidTag" Property="Version" Title="Версия ПО" TextAlign="TextAlign.Right" />
        </Columns>
        </RadzenDataGrid>
}
@code {
    PageState _state;
    IEnumerable<RfidTag>? _data;
    IList<RfidTag>? _selected;
    string? _statefilter;
    float? _batteryfilter;
    int _poll;
    int _mode;
    System.Timers.Timer? _timer;
    readonly Dictionary<int, string> _var_poll = new() { { 0, "Вручную" }, { 5, "5 сек" }, { 10, "10 сек" }, { 30, "30 сек" }, { 60, "1 мин" }, { 180, "3 мин" }, { 300, "5 мин" }, { 600, "10 мин" }, { 1800, "30 мин" } };
    readonly Dictionary<int, string> _var_mode = new() { { 0, "Обновление" }, { 1, "Накопительный" } };
    readonly IEnumerable<string> _states = new[] { "Заряжается", "Ожидание", "Всё" };
    readonly Dictionary<float, string> _battery = new() { { -1f, "Неисправна" }, { 0f, "Ожидается" }, { 256, "Всё" } };

    async Task OnPollClick()
    {
        _state = PageState.Polling;
#if DEBUG
    int n;
    var rand = new Random();
    var newtags = new List<RfidTag>()
    {
    new() { Code = 1295, Battery = (n = rand.Next(27, 47)) <= 31 ? 0 : n / 10f, Flags = RfidTagFlags.Charge, Version = "2.32" },
    new() { Code = 1417, Battery = (n = rand.Next(27, 47)) <= 31 ? 0 : n / 10f, Flags = RfidTagFlags.Charge },
    new() { Code = 1775, Battery = (n = rand.Next(27, 47)) <= 31 ? 0 : n / 10f, Flags = RfidTagFlags.None },
    new() { Code = 8655, Battery = -1f, Flags = RfidTagFlags.None },
    new() { Code = 9495, Battery = (n = rand.Next(27, 47)) <= 31 ? 0 : n / 10f, Flags = RfidTagFlags.Charge },
    new() { Code = 10008, Battery = (n = rand.Next(27, 47)) <= 31 ? 0 : n / 10f, Flags = RfidTagFlags.Charge },
    new() { Code = 10340, Battery = (n = rand.Next(27, 47)) <= 31 ? 0 : n / 10f, Flags = RfidTagFlags.None },
    new() { Code = 10366, Battery = -1f, Flags = RfidTagFlags.Charge },
    new() { Code = 10389, Battery = (n = rand.Next(27, 47)) <= 31 ? 0 : n / 10f, Flags = RfidTagFlags.None }
    };
    if (rand.Next() % 2 == 0) newtags.Add(new() { Code = 10400, Battery = (n = rand.Next(27, 47)) <= 31 ? 0 : n / 10f, Flags = RfidTagFlags.None });
    if (rand.Next() % 3 == 0) newtags.Add(new() { Code = 10500, Battery = (n = rand.Next(27, 47)) <= 31 ? 0 : n / 10f, Flags = RfidTagFlags.None });
    if (rand.Next() % 4 == 0) newtags.Add(new() { Code = 10600, Battery = (n = rand.Next(27, 47)) <= 31 ? 0 : n / 10f, Flags = RfidTagFlags.None });
#else
        var newtags = await _rtm.ReadTagsAsync();
#endif
        _data = newtags;
        _state = PageState.Success;
    }

    void OnRowRender(DataGridCellRenderEventArgs<RfidTag> row)
    {
        if (row.Column.Property == "Battery")
            if (row.Data.BatteryFault)
                row.Attributes.Add("style", "background-color:#ffd0d0");
            else if (row.Data.BatteryWait)
                row.Attributes.Add("style", "background-color:#f9f4ec");
    }

    void OnBatteryFilter(object value)
    {
        if (value.Equals(256f))
            _batteryfilter = null;
    }

    void OnStateFilter(object value)
    {
        if (value.Equals("Всё"))
            _statefilter = null;
    }

    string CountMessage(int count) =>
        " Найдено: " + count + (count.ToString()[^1].ToString() switch { "1" => " метка.", "2" => " метки.", "3" => " метки.", "4" => " метки.", _ => " меток." });

    async Task OnPollChanged(object value)
    {
        _timer?.Stop();
        _timer = null;
        if (_poll > 0)
        {
            _timer = new System.Timers.Timer(_poll * 1000f);
            _timer.Elapsed += async (s, e) =>
            {
                await OnPollClick();
                await InvokeAsync(StateHasChanged);
            };
            _timer.Enabled = true;
        }
    }

    void OnModeChanged(object value)
    {

    }

    async Task ExportToPdf()
    {
        var doc = new DocumentPdf("Список RFID-меток.pdf");
        doc.Open();
        doc.InsertText("Список радиочастотных меток [" + _data.Count() + "]:");
        var dt = new DataTable();
        dt.Columns.AddRange(new[] {
            new DataColumn("Номер", typeof(string)),
            new DataColumn("Зарядка", typeof(string)),
            new DataColumn("Состояние", typeof(string)),
            new DataColumn("Версия ПО", typeof(string))
        });
        _data.ToList().ForEach(r => dt.Rows.Add(
            r.Code,
            r.BatteryFault ? "Неисправна" : r.BatteryWait ? "???" : r.Battery + " В",
            r.State,
            r.Version)
        );
        doc.InsertTable(dt);
        await DownloadAsync(doc.Filename, doc.ToArray());
    }

    async Task DownloadAsync(string filename, byte[] data) =>
         await _jsr.InvokeAsync<object>(
             "saveAsFile",
             filename,
             Convert.ToBase64String(data));

    enum PageState
    {
        None,
        Polling,
        Success
    }
}