@page "/"
@using System.Linq
@using SmartMinex.Runtime
@inject TDispatcher _rtm

<RadzenButton Click="@(e => OnPollClick())">Опросить</RadzenButton>

@if (_state > PollState.None && _data != null)
{
    <RadzenLabel>@CountMessage(_data.Count())</RadzenLabel>
    <RadzenDataGrid Data="@_data" TItem="RfidTag" AllowSorting="true" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" SelectionMode="DataGridSelectionMode.Single"
                    FilterMode="FilterMode.Simple" @bind-Value=@_selected CellRender=@OnRowRender>
        <Columns>
            <RadzenDataGridColumn TItem="RfidTag" Property="Code" Title="Номер" TextAlign="TextAlign.Right" />
            <RadzenDataGridColumn TItem="RfidTag" Property="Battery" Title="Зарядка" TextAlign="TextAlign.Right">
                <Template Context="r">
                    <RadzenText>@(r.BatteryFault ? "Неисправна" : r.BatteryWait ? "???" : r.Battery + " В")</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="RfidTag" Property="State" Title="Состояние" TextAlign="TextAlign.Right" FilterValue="@_stateSelected">
                    <FilterTemplate>
                        <RadzenDropDown Data="@_states" @bind-Value=@_stateSelected Style="width:100%" Change=@OnStateSelected />
                    </FilterTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
}
@code {
    PollState _state;
    IEnumerable<RfidTag>? _data;
    IList<RfidTag>? _selected;
    string? _stateSelected;
    readonly IEnumerable<string> _states = new[] { "Заряжается", "Ожидание", "Всё" };
    readonly IEnumerable<string> _battery = new[] { "Неисправна", "Ожидается", "Значение", "Всё" };

    async Task OnPollClick()
    {
        _state = PollState.Polling;
#if DEBUG
    _data = new List<RfidTag>()
    {
    new() { Code = 1295, Battery = 3.9f, Flags = RfidTagFlags.Charge },
    new() { Code = 1417, Battery = 0f, Flags = RfidTagFlags.Charge },
    new() { Code = 1775, Battery = 4.1f, Flags = RfidTagFlags.None },
    new() { Code = 8655, Battery = -1f, Flags = RfidTagFlags.None },
    new() { Code = 9495, Battery = 0f, Flags = RfidTagFlags.Charge },
    new() { Code = 10008, Battery = 3.6f, Flags = RfidTagFlags.Charge },
    new() { Code = 10340, Battery = 4.2f, Flags = RfidTagFlags.None },
    new() { Code = 10366, Battery = -1f, Flags = RfidTagFlags.Charge },
    new() { Code = 10389, Battery = 3.9f, Flags = RfidTagFlags.None },
    };
#else
        _data = await _rtm.ReadTagsAsync();
#endif
        _state = PollState.Success;
    }

    void OnStateSelected(object value)
    {
        if (value.Equals("Всё"))
            _stateSelected = null;
    }

    void OnBatterySelected(object value)
    {
        if (value.Equals("Всё"))
            _stateSelected = null;
    }

    void OnRowRender(DataGridCellRenderEventArgs<RfidTag> row)
    {
        if (row.Column.Property == "Battery")
            if (row.Data.BatteryFault)
                row.Attributes.Add("style", "background-color:#ffd0d0");
            else if (row.Data.BatteryWait)
                row.Attributes.Add("style", "background-color:#f9f4ec");
    }

    string CountMessage(int count) =>
        " Найдено: " + count + (count.ToString()[^1].ToString() switch { "1" => " метка.", "2" => " метки.", "3" => " метки.", "4" => " метки.", _ => " меток." });

    enum PollState
    {
        None,
        Polling,
        Success
    }
}